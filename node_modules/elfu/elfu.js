if (typeof elfu != 'undefined') {
	function color(a) { return '\u001b[38;5;'+a+'m' }
	console.log(color(1)+'Warning: requiring Elfu from Elfu.'+color(7))
	return
}

var fs = require('fs')
var convertor = require('./convert')
var mod = require('module')
var old_resolveFilename = mod._resolveFilename
var Module = require('module').Module

var extraPaths = [
	process.cwd(),
	process.cwd() + '/node_modules'
]

if (__dirname != process.cwd())
	extraPaths.push(__dirname, __dirname + '/node_modules')

module.exports.paths = extraPaths

module.exports.version = (function(){
	return JSON.parse(fs.readFileSync(__dirname+'/package.json')).version
})()

loadFile = function loadFile(module, filename) {
	var raw = fs.readFileSync(filename, 'utf8')
	var s = raw.charCodeAt(0) === 0xFEFF ? raw.substring(1) : raw
	if (s[0] == '#' && s[1] == '!') {
		s = s.substr(s.indexOf('\n'))
	}
	var yy = convertor.elfuConvert('module.paths.push(__dirname);'+s, filename)
	if (true) {
		var old_name = module.filename, old_paths = module.paths
		module.paths = module.paths.concat(extraPaths)
		if (typeof config != 'undefined') module.paths = module.paths.concat(config.module_paths)
		module.filename = filename
		var R = module._compile(yy, filename)
		module.filename = old_name
		module.paths = old_paths
		return R
	}
	else {
		var mod = new Module(filename, module)
		mod.paths = []
		mod.filename = filename
		var R = mod._compile(yy, filename)
		return mod
	}
}

if (require.extensions) {
   require.extensions['.yy'] = loadFile
   require.extensions['.dc'] = loadFile
}
module.exports.require = function elfuRequire(f) {
	loadFile(module, f)
}
module.exports.convert = convertor.elfuConvert
module.exports.userSym = convertor.userSym
module.exports.handleExt = function handleExt(ext) {
	if (require.extensions) {
	   require.extensions[ext] = loadFile
	}
}

function elfu_mega_resolve(name, parent) {
	var path_ok
	function check(path) {
		try {
			if (fs.statSync(path).isFile()) {
				path_ok = path
				return path
			}
		} catch(em) {}
	}
	for (var i = 0; i < extraPaths.length; i++) {
		if (check(extraPaths[i] + '/' + name + '.yy')) return path_ok
		if (check(extraPaths[i] + '/' + name + '.js')) return path_ok
		if (check(extraPaths[i] + '/' + name + '/' + name + '.yy')) return path_ok
		if (check(extraPaths[i] + '/' + name + '/' + name + '.js')) return path_ok
		if (check(extraPaths[i] + '/' + name + '/package.json')) {
			try {
				var package = JSON.parse(fs.readFileSync(path_ok))
			} catch(em) {
				return
			}
			if (package.main) return package.main
		}
	}
	throw new Error('Elfu cannot resolve "' + name + '"')
	//var s = cur.filename.split('/').slice(0, -1).join('/')
}

mod._resolveFilename = function(request, parent) {
	parent.paths = parent.paths.concat(extraPaths)
	try {
		var result = old_resolveFilename(request, parent)
	} catch(e) {
		result = elfu_mega_resolve(request, parent)
	}
	return result
}

elfu_rtl = require('./rtl.yy')
