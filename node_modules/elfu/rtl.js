fs = require ('fs')

//color = function(c) { return '\u001b[3'+c+'m'}
colorEnd = function (a,b,c) { return '\u001b(B\u001b[m'}
color = function (a,b,c) {
	if (a == undefined) { return  colorEnd() }  
	return '\u001b[38;5;'+a+'m'
}

bg = function bg (a,b,c) {
	if (a == undefined) { return '\u001b[49m' }  
	return '\u001b[48;5;'+a+'m'
}

uncolor = function uncolor (a,b,c) {
	;var R  =  ''
	a = repl(a, '\u001b[1G', '')
	a = repl(a, '\u001b[3G', '')
	a = repl(a, '\u001b[0J', '')
	a = repl(a, '\u001b(B\u001b[m', '')
	 for(var i = 0; i < a.length; i++){
		if (a[i] == '\u001b') {
			if (a[i+1] == '[' && a[i+2] == '3' && a[i+3] == '8') {
				while (a[i] != 'm' && i < a.length) { i++ }
				if (a[i] == undefined) { break }  
			} else {
				R += '%'
				}
		} else {
			R += a[i]
			}

	}
	return  R
}

if ( process.stdout._handle ) {
	;var H  =  process.stdout._handle
	if ( H && H.setBlocking ) {
		H.setBlocking(true)
		// http://stackoverflow.com/questions/38085746
	}
}

timeLimit = function timeLimit (a,b,c) {
	if (arguments.callee.t == undefined) {
		arguments.callee.t = (new Date().getTime())
		return  true
	}
	if (arguments.callee.t + a > (new Date().getTime())) return  false
	arguments.callee.t = (new Date().getTime())
	return  true
}

//➮ repl { $ a ⌶ b ⫴ c }

module.exports.repl = repl = function repl (s,a,b) {
	if (arguments.length > 3) {
		;var A  =  Array.prototype.slice.apply(arguments)
		;var x  =  1
		while ( x < A.length ) {
			s = arguments.callee(s, A[x], A[x+1])
			x += 2
		}
		return  s
		}
	;var x  =  0
	;var x1  =  s.indexOf(a, x)
	if (x1 < 0) return  s
	;var R  =  ''	;var L  =  s.length	;var AL  =  a.length
	while (x < L) {
		;var o  =  s .substr(x, x1-x)
		R += o
		R += b
		x = x1 + AL
		x1 = s .indexOf(a, x)
		if (x1 < 0) break
	}
	R += s.slice(x)
	return  R
}


String.prototype.re = function re (a,b) {
	"use strict"
	;var s  =  this
	if (arguments.length > 2) {
		;var A  =  Array.prototype.slice.apply(arguments)
		;var x  =  0
		while ( x < A.length ) {
			s = repl(s, A[x], A[x+1])
			x += 2
		}
		return  s
		}
	return  repl(s, a, b)
}

sysexe = function sysexe (cmd,arg,f) {
	if (typeof (arg.map )!= 'function') {
		console.log('arguments must be []') 
		process.exit(1)
	}
	;var L  =  ''
	;var spawn  =  require('child_process').spawn
	;var x  =  spawn(cmd, arg)
	function d (a,b,c) { L += a.toString() }
	x.stdout.on('data', d) 
	x.stderr.on('data', d)
	x.on('close', function (a,b,c) { f(L .split ('\n'), a) })
	return  x
}

process.stdout.write = function (a,b,c) {
	;var a  =  Array.prototype.join.apply(arguments, [' '])
	process.stdout.write(a)
}

isArray = function isArray (a,b,c) { return  a.map == Array.prototype.map }

literate = function (a,f) {
	// callback: f(parent object, index/name, value, kind)
	if ( typeof  (a )== 'object' ) {
		if ( a.map ) {
			 for(var i_=0; i_<a.length; i_++) {
				if ( typeof (a[i_] )== 'object' ) {
					f(a, i_, a[i_], 'arr')
					arguments.callee(a[i_], f)
				}
				else if ( typeof (a[i_] )== 'string' || typeof (a[i_] )== 'number' ) {
					f(a, i_, a[i_], typeof (a[i_]))
				}
			}
		}
		else  {
			;var K  =  Object.keys(a)
			 for(var k_=0; k_<K.length; k_++) { 
				if ( typeof  (a[K[k_]] )== 'object' ) {
					;var o  =  a[K[k_]]
					f(a, K[k_], o, 'obj')
					arguments.callee(o, f)
				}
				else if ( typeof  (K[k_] )== 'string' || typeof (K[k_] )== 'number' ) {
					f(a, K[k_], a[K[k_]], typeof (K[k_]))
				}
			}
		}
	}
}

yyd_get_terminal_width = function (a,b,c) {
	return  parseInt(fs.readFileSync('/var/tmp/yyd.term.width' ).toString())
}

__args = function __args (required,optional) {
	;var R  =  {}
	;var x  =  2
	 for(var i_=0; i_<required.length; i_++) {
		;var X  =  process.argv[x++]
		if (X == undefined) {
			console.log('arguments required: '+ required.join(', ')) 
			process.exit(1) }
		R[required[i_]] = X
	}
	if (optional) {
		 for(var i_=0; i_<optional.length; i_++) {
			;var X  =  process.argv[x++]
			if (X) { R[optional[i_]] = X }  
		}
		}
	return  R
}

function stdinReadSync() {
    var b = new Buffer(1024)
    var data = ''

    while (true) {
        var n = fs.readSync(process.stdin.fd, b, 0, b.length)
        if (!n) break
        data += b.toString(null, 0, n)
    }
    return data
}

